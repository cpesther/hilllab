% Christopher Esther, Hill Lab, 9/26/2025

function [] = record_realtime_track(path, video_number, camera, total_frames, fps)
% RECORD_REALTIME_TRACK Capture and track particles in near real-time using
% a PointGrey Flea3 or Grasshopper3 camera.
%
% This function captures video from a PointGrey Flea3 or Grasshopper3
% camera, writes raw grayscale frames into a memory-mapped binary file,
% and logs metadata (frame number and timestamp) to a .mat file for later
% use. Annotated frames can be read/written by a Python worker in parallel.
%
% ARGUMENTS:
% path (string): Folder path where frames and metadata will be saved.
%
% video_number (int, optional): Number appended to the first file's name. 
% Default is 1.
%
% camera (string, optional): The camera being used. Determines video
% format. Defaults to 'GS3'. Other valid value is 'FL3'.
%
% total_frames (int, optional): Number of frames to record. Default 1200.
%
% fps (int, optional): Frames per second. Must be 15, 30, or 60. Default 60.
%
% timeout_seconds (float, optional): Maximum wait time per acquisition.
% Default is 10.

% --------------------------
% Defaults
% --------------------------
if nargin < 2 || isempty(video_number), video_number = 1; end
if nargin < 3 || isempty(camera), camera = 'GS3'; end
if nargin < 4 || isempty(total_frames), total_frames = 1200; end
if nargin < 5 || isempty(fps), fps = 60; end


if ~isfolder(path)
    mkdir(path);  % create the folder if it doesn't exist
end


% --------------------------
% Camera format
% --------------------------
if strcmp(camera, 'GS3')
    video_format = 'F7_Raw8_2448x2048_Mode0';
elseif strcmp(camera, 'FL3')
    video_format = 'F7_Raw8_1280x1024_Mode0';
else
    error('Unsupported camera type: %s', camera);
end

% Extract dimensions
tokens = regexp(video_format, '_(\d+)x(\d+)_', 'tokens');
dims = str2double(tokens{1});  
height = dims(2);
width  = dims(1);

% --------------------------
% Preallocate memmap for raw frames
% --------------------------
raw_file = fullfile(path, 'raw_frames.bin');
fid = fopen(raw_file,'w');
fwrite(fid, zeros(height,width,total_frames,'uint8'), 'uint8');
fclose(fid);

raw_map = memmapfile(raw_file, ...
    'Format', {'uint8', [height width total_frames], 'frames'}, ...
    'Writable', true);

% Metadata arrays
frame_numbers = zeros(total_frames,1,'int32');
timestamps    = zeros(total_frames,1);

% --------------------------
% Setup video input
% --------------------------
vid = videoinput('pointgrey', 1, video_format);
src = getselectedsource(vid);
src.FrameRate = fps;

vid.FramesPerTrigger  = 1;
vid.TriggerRepeat     = Inf;
vid.FrameGrabInterval = 1;

% --------------------------
% Preview
% --------------------------
preview(vid);
disp('Preview started. Press Y to record, N to exit.');

running = true;

while running

    str = input('Record video? Y/N [Y]: ','s');
    
    
    if isempty(str), str = 'Y'; end  % default to Yes
    
    % --------------------------
    % Recording loop
    % --------------------------
    if strcmpi(str,'y')
        disp('Recording...');
        start_time = tic;
    
        for f_idx = 1:total_frames
            frame = getsnapshot(vid);
            gray  = im2gray(frame);
    
            % Write frame
            raw_map.Data.frames(:,:,f_idx) = gray;
    
            % Metadata
            frame_numbers(f_idx) = f_idx;
            timestamps(f_idx)    = toc(start_time);
        end
    
        disp('Compiling video...');
        compile_memmap_video(raw_file, fps, )

        % Save metadata
        save(fullfile(path, sprintf('frame_metadata_%04d.mat', video_number)), ...
            'frame_numbers','timestamps');

        video_number = video_number + 1;  % increment for next video

    
    elseif strcmpi(str,'n')
        disp('Exiting...');
        running = false;
    else
        disp('Invalid input. Please type Y or N.');
    end
end

% --------------------------
% Cleanup
% --------------------------
try
    closepreview(vid);
catch
end
delete(vid);
clear vid;
imaqreset;

end
